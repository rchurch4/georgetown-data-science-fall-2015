yelp_data[user_is_local == TRUE, .N , by=.(restaurant_name)]
yelp_data[user_is_local == FALSE, .N , by=.(restaurant_name)]
yelp2 <- yelp_data
?copy
yelp2 <- copy(yelp_data)
tables()
yelp2[user_is_local == TRUE, .N , by=.(restaurant_name)]
yelp2[user_is_local == TRUE, local_N := .N , by=.(restaurant_name)]
yelp2
yelp2 <- copy(yelp_data)
yelp2 <- copy(yelp_data)
yelp2[user_is_local == FALSE, .N , by=.(restaurant_name)]
yelp2[user_is_local == TRUE, .N , by=.(restaurant_name)]
restaurant_local_N <- yelp2[user_is_local == TRUE, .N , by=.(restaurant_name)]
# restaurant_local_N <- yelp2[user_is_local == TRUE, .N , by=.(restaurant_name)]
restaurant_local_N
restaurant_nonlocal_N
restaurant_nonlocal_N <- yelp2[user_is_local == FALSE, .N , by=.(restaurant_name)]
restaurant_total_N <- yelp_data[, .N, by=.(restaurant_name)]
restaurant_total_N
tables()
setkey(restaurant_nonlocal_N, restaurant_name)
setkey(restaurant_local_N, restaurant_name)
setkey(restaurant_total_N, restaurant_name)
restaurant_nonlocal_N
restaurant_local_N
restaurant_total_N
setnames(restaurant_nonlocal_N, names(restaurant_nonlocal_N), c("resaurant_name", "nonlocal_N"))
restaurant_nonlocal_N <- yelp2[user_is_local == FALSE, .N , by=.(restaurant_name)]
restaurant_local_N <- yelp2[user_is_local == TRUE, .N , by=.(restaurant_name)]
restaurant_total_N <- yelp_data[, .N, by=.(restaurant_name)]
setnames(restaurant_nonlocal_N, names(restaurant_nonlocal_N), c("resaurant_name", "nonlocal_N"))
setnames(restaurant_local_N, names(restaurant_local_N), c("resaurant_name", "local_N"))
setnames(restaurant_total_N, names(restaurant_total_N), c("resaurant_name", "total_N"))
setkey(restaurant_nonlocal_N, restaurant_name)
setkey(restaurant_local_N, restaurant_name)
setkey(restaurant_total_N, restaurant_name)
restaurant_nonlocal_N <- yelp2[user_is_local == FALSE, .N , by=.(restaurant_name)]
restaurant_local_N <- yelp2[user_is_local == TRUE, .N , by=.(restaurant_name)]
restaurant_total_N <- yelp_data[, .N, by=.(restaurant_name)]
setnames(restaurant_nonlocal_N, names(restaurant_nonlocal_N), c("restaurant_name", "nonlocal_N"))
setnames(restaurant_local_N, names(restaurant_local_N), c("restaurant_name", "local_N"))
setnames(restaurant_total_N, names(restaurant_total_N), c("restaurant_name", "total_N"))
setkey(restaurant_nonlocal_N, restaurant_name)
setkey(restaurant_local_N, restaurant_name)
setkey(restaurant_total_N, restaurant_name)
restaurant_total_N
restaurant_local_N
restaurant_nonlocal_N[restaurant_local_N[restaurant_total_N]]
restaurant_all_N <- restaurant_nonlocal_N[restaurant_local_N[restaurant_total_N]]
restaurant_all_N
yelp_data[, .N, by=.(restaurant_name)]
yelp_data[, .(.N), by=.(restaurant_name)]
yelp_data[, .(.N, mean(user_rating)), by=.(restaurant_name)]
setnames(restaurant_total_N, names(restaurant_total_N), c("restaurant_name", "total_N", "overall_mean"))
restaurant_total_N <- yelp_data[, .(.N, mean(user_rating)), by=.(restaurant_name)]
setnames(restaurant_total_N, names(restaurant_total_N), c("restaurant_name", "total_N", "overall_mean"))
setkey(restaurant_nonlocal_N, restaurant_name)
setkey(restaurant_local_N, restaurant_name)
setkey(restaurant_total_N, restaurant_name)
restaurant_all <- restaurant_nonlocal_N[restaurant_local_N[restaurant_total_N]]
restaurant_all
?:=
help(":=")
restaurant_all[ , c("proportion_local", "proportion_nonlocal") := .(local_N/total_N, nonlocal_N/total_N)]
restaurant_all
restaurant_nonlocal_N <- yelp_data[user_is_local == FALSE, .N , by=.(restaurant_name)]
restaurant_local_N <- yelp_data[user_is_local == TRUE, .N , by=.(restaurant_name)]
restaurant_total_N <- yelp_data[, .(.N, mean(user_rating)), by=.(restaurant_name)]
setnames(restaurant_nonlocal_N, names(restaurant_nonlocal_N), c("restaurant_name", "nonlocal_N"))
setnames(restaurant_local_N, names(restaurant_local_N), c("restaurant_name", "local_N"))
setnames(restaurant_total_N, names(restaurant_total_N), c("restaurant_name", "total_N", "overall_mean"))
setkey(restaurant_nonlocal_N, restaurant_name)
setkey(restaurant_local_N, restaurant_name)
setkey(restaurant_total_N, restaurant_name)
restaurant_all <- restaurant_nonlocal_N[restaurant_local_N[restaurant_total_N]] # join
restaurant_all[ , c("proportion_local", "proportion_nonlocal") := .(local_N/total_N, nonlocal_N/total_N)]
restaurant_all
restaurant_all
setkey(restaurant_all, total_N)
restaurant_all
tail(restaurant_all)
class(tail(restaurant_all))
tail(restaurant_all, 10)
setkey(restaurant_all, proportion_local)
head(restaurant_all, 10)
tail(restaurant_all, 10)
head(restaurant_all, 10)
tail(restaurant_all, 10)
sum(is.na(restaurant_all))
restaurant_all[ is.na(restaurant_all) ]
restaurant_all[ is.na(restaurant_all) , ]
restaurant_all[ is.na() , ]
restaurant_all[ is.na(restaurant_all) ]
is.na(restaurant_all)
restaurant_all[is.na(restaurant_all)]
restaurant_all[is.na(restaurant_all), ]
restaurant_all[is.na(proportion_nonlocal)]
restaurant_all
restaurant_all[905]
restaurant_all[905, 1]
restaurant_all[is.na(restaurant_all), with=FALSE]
restaurant_all[is.na(restaurant_all), , with=FALSE]
restaurant_all[905, 1, with=FALSE]
restaurant_all[905, c(2, 7), with=FALSE]
restaurant_all[905, c(2, 7), with=FALSE]
class(restaurant_all[905, c(2, 7), with=FALSE])
restaurant_all[905, c(2, 7), with=FALSE] <- 0
restaurant_all
restaurant_all[905, c(2, 7), with=FALSE]
restaurant_all[905, c(2, 7), with=FALSE][1]
restaurant_all[905, c(2, 7), with=FALSE]$nonlocal_N
restaurant_all[c(905, 906), c(2, 7), with=FALSE]$nonlocal_N
restaurant_all[c(905, 906), c(2, 7), with=FALSE]$nonlocal_N <- 0
restaurant_all
restaurant_all[905, c(2, 7), with=FALSE]$nonlocal_N <- 0
remove_na <- function(x){
dm <- data.matrix(x)
dm[is.na(dm)] <- 0
data.table(dm)
}
remove_na(restaurant_all)
sum(is.na(restaurant_all)
)
is.na(restaurant_all)
restaurant_all
restaurant_all2 <- remove_na(restaurant_all)
restaurant_all2
is.na(restaurant_all2)
restaurant_all2
restaurant_all
source('~/.active-rstudio-document', echo=TRUE)
f_dowle2 = function(DT) {
for (i in names(DT))
DT[is.na(get(i)),i:=0,with=FALSE]
}
f_dowle2(restaurant_all)
restaurant_all
restaurant_all
restaurant_all
restaurant_all
# prepare data for analysis
restaurant_nonlocal_N <- yelp_data[user_is_local == FALSE, .N , by=.(restaurant_name)]
restaurant_local_N <- yelp_data[user_is_local == TRUE, .N , by=.(restaurant_name)]
restaurant_total_N <- yelp_data[, .(.N, mean(user_rating)), by=.(restaurant_name)]
setnames(restaurant_nonlocal_N, names(restaurant_nonlocal_N), c("restaurant_name", "nonlocal_N"))
setnames(restaurant_local_N, names(restaurant_local_N), c("restaurant_name", "local_N"))
setnames(restaurant_total_N, names(restaurant_total_N), c("restaurant_name", "total_N", "overall_mean"))
setkey(restaurant_nonlocal_N, restaurant_name)
setkey(restaurant_local_N, restaurant_name)
setkey(restaurant_total_N, restaurant_name)
restaurant_all <- restaurant_nonlocal_N[restaurant_local_N[restaurant_total_N]] # joins
restaurant_all[ , c("proportion_local", "proportion_nonlocal") := .(local_N/total_N, nonlocal_N/total_N)]
# remove NA function from here:
# http://stackoverflow.com/questions/7235657/fastest-way-to-replace-nas-in-a-large-data-table
remove_NA_from_DT = function(DT) {
for (i in names(DT))
DT[is.na(get(i)),i:=0,with=FALSE]
}
remove_NA_from_DT(restaurant_all)
restaurant_all
restaurant_all
restaurant_all
restaurant_all
# investigate top 10 in terms of total_N
setkey(restaurant_all, proportion_local)
head(restaurant_all, 10)
tail(restaurant_all, 10)
restaurant_all[total_N >= 200]
setkey(restaurant_all, proportion_local)
head(restaurant_all[total_N >= 200], 10)
tail(restaurant_all[total_N >= 200], 10)
restaurant_all
restaurant_all[ , .(restaurant_name, overall_mean, proportion_local, proportion_nonlocal)]
restaurant_all[ , .(restaurant_name, overall_mean, proportion_local, proportion_nonlocal)]
write.csv(restaurant_all[ , .(restaurant_name, overall_mean, proportion_local, proportion_nonlocal)])
write.csv(restaurant_all[ , .(restaurant_name, overall_mean, proportion_local, proportion_nonlocal)],
file="restaurant_proportion_local.csv",
row.names=FALSE)
# yelp
# coerce dates to Date type, save features in a new data.table
yelp_data_new <- yelp_data[ , .(user_is_local, user_rating)]
yelp_data_new[ , user_review_date := .(as.Date(yelp_data$user_review_date))]
setkey(yelp_data_new)
yelp_data_new
yelp_data_new[ , .N , by=year(user_review_date)]
yelp_data_new[ , mean(user_rating) , by=year(user_review_date)]
yelp_data_new[year(user_review_date) >= 2010 , mean(user_rating) , by=year(user_review_date)]
yelp_data_new[year(user_review_date) >= 2010 , .(.N, mean(user_rating)) , by=year(user_review_date)]
yelp_annual <- yelp_data_new[year(user_review_date) >= 2010 , .(.N, mean(user_rating)) , by=year(user_review_date)]
yelp_annual
yelp_annual <- yelp_data_new[1==1 && 1==1 , .(.N, mean(user_rating)) , by=year(user_review_date)]
yelp_annual
yelp_data_new[1==1 && 1==2 , .(.N, mean(user_rating)) , by=year(user_review_date)]
yelp_annual <- yelp_data_new[user_is_local == TRUE && year(user_review_date) >= 2010, .(.N, mean(user_rating)) , by=year(user_review_date)]
yelp_annual
yelp_data_new
yelp_annual <- yelp_data_new[year(user_review_date) >= 2010 , .(.N, mean(user_rating)) , by=year(user_review_date)]
yelp_annual
yelp_annual <- yelp_data_new[user_is_local == TRUE && year(user_review_date) >= 2010, .(.N, mean(user_rating)) , by=year(user_review_date)]
yelp_annual
yelp_annual <- yelp_data_new[user_is_local == FALSE && year(user_review_date) >= 2010, .(.N, mean(user_rating)) , by=year(user_review_date)]
yelp_annual
yelp_annual <- yelp_data_new[ year(user_review_date) >= 2010, .(.N, mean(user_rating)) , by=year(user_review_date)]
source('~/.active-rstudio-document', echo=TRUE)
yelp_annual
yelp_annual <- yelp_data_new[ year(user_is_local == TRUE, .(.N, mean(user_rating)) , by=year(user_review_date)]
yelp_annual <- yelp_data_new[ user_is_local == TRUE, .(.N, mean(user_rating)) , by=year(user_review_date)]
yelp_annual
# local
yelp_annual_local <- yelp_data_new[ user_is_local == TRUE, .(.N, mean(user_rating)) , by=year(user_review_date)]
# non-local
yelp_annual_nonlocal <- yelp_data_new[ user_is_local == FALSE, .(.N, mean(user_rating)) , by=year(user_review_date)]
yelp_annual_local
yelp_annual_nonlocal
yelp_annual_local[year >= 2010]
yelp_annual_nonlocal[year >= 2010]
yelp_annual_local[year >= 2010]
setnames(yelp_annual_local, names(yelp_annual_local), c("year", "N", "mean_rating"))
setnames(yelp_annual_nonlocal, names(yelp_annual_nonlocal), c("year", "N", "mean_rating"))
yelp_annual_local
yelp_annual_nonlocal
yelp_annual_local[year >= 2010, .(year, mean_rating)]
yelp_annual_nonlocal[year >= 2010, .(year, mean_rating)]
dir()
write.csv(yelp_annual_local, file="yelp_annual_local.csv", row.names=FALSE)
write.csv(yelp_annual_nonlocal, file="yelp_annual_nonlocal.csv", row.names=FALSE)
yelp_annual_local[year >= 2010, .(year, mean_rating)]
yelp_annual_nonlocal[year >= 2010, .(year, mean_rating)]
write.csv(yelp_annual_local[year >= 2010, .(year, mean_rating)], file="yelp_annual_local.csv", row.names=FALSE)
write.csv(yelp_annual_nonlocal[year >= 2010, .(year, mean_rating)], file="yelp_annual_nonlocal.csv", row.names=FALSE)
# TRIPADVISOR
# coerce dates to Date type, save features in a new data.table
tripadvisor_data_new <- tripadvisor_data[ , .(user_is_local, user_rating)]
tripadvisor_data_new[ , user_review_date := .(as.Date(tripadvisor_data$user_review_date))]
setkey(tripadvisor_data_new)
# aggregate
tripadvisor_annual_local <- tripadvisor_data_new[ user_is_local == TRUE, .(.N, mean(user_rating)) , by=year(user_review_date)]
tripadvisor_annual_nonlocal <- tripadvisor_data_new[ user_is_local == FALSE, .(.N, mean(user_rating)) , by=year(user_review_date)]
setnames(tripadvisor_annual_local, names(tripadvisor_annual_local), c("year", "N", "mean_rating"))
setnames(tripadvisor_annual_nonlocal, names(tripadvisor_annual_nonlocal), c("year", "N", "mean_rating"))
tripadvisor_annual_local[year >= 2010, .(year, mean_rating)]
tripadvisor_annual_nonlocal[year >= 2010, .(year, mean_rating)]
write.csv(tripadvisor_annual_local[year >= 2010, .(year, mean_rating)], file="tripadvisor_annual_local.csv", row.names=FALSE)
write.csv(tripadvisor_annual_nonlocal[year >= 2010, .(year, mean_rating)], file="tripadvisor_annual_nonlocal.csv", row.names=FALSE)
tripadvisor_data_new <- tripadvisor_data[ , .(user_is_local, user_rating)]
tripadvisor_data_new[ , user_review_date := .(as.Date(tripadvisor_data$user_review_date))]
tripadvisor_data_new
tripadvisor_data
head(tripadvisor_data$user_review_date)
table(tripadvisor_data$user_review_date)
?as.Date
head(tripadvisor_data$user_review_date)
?substring
substring(tripadvisor_data$user_review_date, first=10)
head(substring(tripadvisor_data$user_review_date, first=length(tripadvisor_data$user_review_date)-4))
head(substring(tripadvisor_data$user_review_date, first=length(tripadvisor_data$user_review_date)-10))
head(substring(tripadvisor_data$user_review_date, first=10))
length(tripadvisor_data$user_review_date)
head(tripadvisor_data$user_review_date)
head(tripadvisor_data$user_review_date)
as.Date(head(tripadvisor_data$user_review_date))
as.Date(head(tripadvisor_data$user_review_date), format="%B %d, %Y")
head(as.Date(tripadvisor_data$user_review_date, format="%B %d, %Y"))
tripadvisor_data_new[ , user_review_date := .(as.Date(tripadvisor_data$user_review_date, format="%B %d, %Y"))]
tripadvisor_data_new
tripadvisor_data_new
tripadvisor_data_new <- tripadvisor_data[ , .(user_is_local, user_rating)]
tripadvisor_data_new[ , user_review_date := .(as.Date(tripadvisor_data$user_review_date, format="%B %d, %Y"))]
tripadvisor_data_new
tripadvisor_data_new
setkey(tripadvisor_data_new)
# aggregate
tripadvisor_annual_local <- tripadvisor_data_new[ user_is_local == TRUE, .(.N, mean(user_rating)) , by=year(user_review_date)]
tripadvisor_annual_nonlocal <- tripadvisor_data_new[ user_is_local == FALSE, .(.N, mean(user_rating)) , by=year(user_review_date)]
setnames(tripadvisor_annual_local, names(tripadvisor_annual_local), c("year", "N", "mean_rating"))
setnames(tripadvisor_annual_nonlocal, names(tripadvisor_annual_nonlocal), c("year", "N", "mean_rating"))
tripadvisor_annual_local[year >= 2010, .(year, mean_rating)]
tripadvisor_annual_nonlocal[year >= 2010, .(year, mean_rating)]
write.csv(tripadvisor_annual_local[year >= 2010, .(year, mean_rating)], file="tripadvisor_annual_local.csv", row.names=FALSE)
write.csv(tripadvisor_annual_nonlocal[year >= 2010, .(year, mean_rating)], file="tripadvisor_annual_nonlocal.csv", row.names=FALSE)
setwd("C:/Users/Ravi/Desktop/js/graphs/year_graphs")
rm(list=ls())
read.csv("tripadvisor_annual_local.csv")
read.csv("tripadvisor_annual_nonlocal.csv")
read.csv("yelp_annual_local.csv")
read.csv("yelp_annual_nonlocal.csv")
write.table(read.csv("tripadvisor_annual_local.csv"),
file='tripadvisor_annual_local.tsv',
quote=FALSE,
sep='\t',
col.names = NA)
write.table(read.csv("tripadvisor_annual_local.csv"),
file='tripadvisor_annual_local.tsv',
quote=FALSE,
sep='\t',
row.names=FALSE,
col.names = NA)
?write.table
write.table(read.csv("tripadvisor_annual_local.csv"),
file='tripadvisor_annual_local.tsv',
quote=FALSE,
sep='\t',
row.names=FALSE)
write.table(read.csv("yelp_annual_local.csv"),
file='yelp_annual_local.tsv',
quote=FALSE,
sep='\t',
row.names=FALSE)
write.table(read.csv("yelp_annual_nonlocal.csv"),
file='yelp_annual_nonlocal.tsv',
quote=FALSE,
sep='\t',
row.names=FALSE)
write.table(read.csv("tripadvisor_annual_local.csv"),
file='tripadvisor_annual_local.tsv',
quote=FALSE,
sep='\t',
row.names=FALSE)
write.table(read.csv("tripadvisor_annual_nonlocal.csv"),
file='tripadvisor_annual_nonlocal.tsv',
quote=FALSE,
sep='\t',
row.names=FALSE)
write.table(read.csv("yelp_annual_local.csv"),
file='yelp_annual_local.tsv',
quote=FALSE,
sep='\t',
row.names=FALSE)
write.table(read.csv("yelp_annual_nonlocal.csv"),
file='yelp_annual_nonlocal.tsv',
quote=FALSE,
sep='\t',
row.names=FALSE)
require(data.table)
# Set the working directory to data directory.
setwd("~/../Docs/Geekazoid/Courses/Intro_to_Analytics/Project/Git/georgetown-data-science-fall-2015/data")
#setwd("please_change_me/data")
# Load data
load("tripadvisor_data.Rdata")
load("yelp_data.Rdata")
names(yelp_data)
yelp_data_radius <- yelp_data
yelp_data_radius
yelp_data_radius <- copy(yelp_data)
yelp_data_radius
names(yelp_data_radius)
yelp_data_radius <- yelp_data_radius[ , .(user_rating, user_latitude, user_longitude, restaurant_latitude, restaurant_longitude)]
yelp_data_radius
################################
# changing radius
yelp_data_radius <- copy(yelp_data)
yelp_data_radius <- yelp_data_radius[ , .(user_rating, user_restaurant_distance)]
yelp_data_radius
yelp_data_radius[user_restaurant_distance <= 50]
yelp_data_radius[user_is_local == TRUE]
yelp_data[user_is_local == TRUE, ]
yelp_data_radius[user_restaurant_distance <= 50]
yelp_data_radius[user_restaurant_distance <= 50]
yelp_data_radius[user_restaurant_distance <= 50]
yelp_data_radius[user_restaurant_distance <= 50, mean(user_rating)]
yelp_data_radius[user_restaurant_distance > 50, mean(user_rating)]
yelp_data_radius[user_restaurant_distance > 50, mean(user_rating)]
for (r in seq(10, 50, by=10)) {
print(r)
yelp_data_radius[user_restaurant_distance <= r, mean(user_rating)]
yelp_data_radius[user_restaurant_distance > r, mean(user_rating)]
print("----")
}
yelp_data_radius[user_restaurant_distance <= r, mean(user_rating)]
yelp_data_radius[user_restaurant_distance <= r, mean(user_rating)]
for (r in seq(10, 50, by=10)) {
print(r)
print(yelp_data_radius[user_restaurant_distance <= r, mean(user_rating)])
yelp_data_radius[user_restaurant_distance > r, mean(user_rating)]
print("----")
}
for (r in seq(10, 50, by=10)) {
print(r)
print(yelp_data_radius[user_restaurant_distance <= r, mean(user_rating)])
print(yelp_data_radius[user_restaurant_distance <= r, .N])
print(yelp_data_radius[user_restaurant_distance > r, mean(user_rating)])
print("----")
}
for (r in seq(20, 100, by=20)) {
print(r)
print(yelp_data_radius[user_restaurant_distance <= r, mean(user_rating)])
print(yelp_data_radius[user_restaurant_distance <= r, .N])
print(yelp_data_radius[user_restaurant_distance > r, mean(user_rating)])
print("----")
}
for (r in seq(5, 50, by=5)) {
print(r)
print(yelp_data_radius[user_restaurant_distance <= r, mean(user_rating)])
print(yelp_data_radius[user_restaurant_distance <= r, .N])
print(yelp_data_radius[user_restaurant_distance > r, mean(user_rating)])
print("----")
}
for (r in seq(10, 50, by=5)) {
print(r)
print(yelp_data_radius[user_restaurant_distance <= r, mean(user_rating)])
print(yelp_data_radius[user_restaurant_distance <= r, .N])
print(yelp_data_radius[user_restaurant_distance > r, mean(user_rating)])
print("----")
}
for (r in seq(10, 50, by=5)) {
print(r)
print(yelp_data_radius[user_restaurant_distance <= r, mean(user_rating)])
print(yelp_data_radius[user_restaurant_distance <= r, .N])
print(yelp_data_radius[user_restaurant_distance > r, mean(user_rating)])
print("----")
}
yelp_data_radius
yelp_data
names(yelp_data)
yelp_data[ , .(user_review_length)]
yelp_data[ user_review_length <= 500, .(user_review_length)]
yelp_data[ user_review_length <= 500, mean(user_review)]
yelp_data[ user_review_length <= 500, mean(user_rating)]
yelp_data[ user_review_length > 500, mean(user_rating)]
t <- 300
yelp_data[ user_review_length <= t, mean(user_rating)]
yelp_data[ user_review_length > t, mean(user_rating)]
t <- 1000
yelp_data[ user_review_length <= t, mean(user_rating)]
yelp_data[ user_review_length > t, mean(user_rating)]
t <- 200
yelp_data[ user_review_length <= t, mean(user_rating)]
yelp_data[ user_review_length > t, mean(user_rating)]
t <- 200
yelp_data[ user_review_length <= t, mean(user_rating)]
yelp_data[ user_review_length > t, mean(user_rating)]
yelp_data[ user_review_length <= t, mean(user_rating)]
for (r in seq(10, 50, by=20)) {
print(r)
print(yelp_data_radius[user_restaurant_distance <= r, mean(user_rating)])
print(yelp_data_radius[user_restaurant_distance <= r, .N])
print(yelp_data_radius[user_restaurant_distance > r, mean(user_rating)])
print("----")
}
# ta
tripadvisor_data_radius <- copy(tripadvisor_data)
tripadvisor_data_radius <- tripadvisor_data_radius[ , .(user_rating, user_restaurant_distance)]
for (r in seq(10, 50, by=20)) {
print(r)
print(tripadvisor_data_radius[user_restaurant_distance <= r, mean(user_rating)])
print(tripadvisor_data_radius[user_restaurant_distance <= r, .N])
print(tripadvisor_data_radius[user_restaurant_distance > r, mean(user_rating)])
print("----")
}
r <- 10
print(tripadvisor_data_radius[user_restaurant_distance <= r, mean(user_rating)])
print(tripadvisor_data_radius[user_restaurant_distance <= r, .N])
print(tripadvisor_data_radius[user_restaurant_distance > r, mean(user_rating)])
r <- 500
print(tripadvisor_data_radius[user_restaurant_distance <= r, mean(user_rating)])
print(tripadvisor_data_radius[user_restaurant_distance <= r, .N])
print(tripadvisor_data_radius[user_restaurant_distance > r, mean(user_rating)])
r <- 800
print(tripadvisor_data_radius[user_restaurant_distance <= r, mean(user_rating)])
print(tripadvisor_data_radius[user_restaurant_distance <= r, .N])
print(tripadvisor_data_radius[user_restaurant_distance > r, mean(user_rating)])
r <- 800
print(tripadvisor_data_radius[user_restaurant_distance <= r, mean(user_rating)])
print(tripadvisor_data_radius[user_restaurant_distance <= r, .N])
print(tripadvisor_data_radius[user_restaurant_distance > r, mean(user_rating)])
r <- 800
print(tripadvisor_data_radius[user_restaurant_distance <= r, mean(user_rating)])
print(tripadvisor_data_radius[user_restaurant_distance <= r, .N])
print(tripadvisor_data_radius[user_restaurant_distance > r, mean(user_rating)])
r <- 800
print(tripadvisor_data_radius[user_restaurant_distance <= r, mean(user_rating)])
print(tripadvisor_data_radius[user_restaurant_distance <= r, .N])
print(tripadvisor_data_radius[user_restaurant_distance > r, mean(user_rating)])
r <- 1000
print(tripadvisor_data_radius[user_restaurant_distance <= r, mean(user_rating)])
print(tripadvisor_data_radius[user_restaurant_distance <= r, .N])
print(tripadvisor_data_radius[user_restaurant_distance > r, mean(user_rating)])
r <- 1000
print(yelp_data_radius[user_restaurant_distance <= r, mean(user_rating)])
print(yelp_data_radius[user_restaurant_distance <= r, .N])
print(yelp_data_radius[user_restaurant_distance > r, mean(user_rating)])
for (r in seq(10, 50, by=20)) {
print(r)
print(yelp_data_radius[user_restaurant_distance <= r, mean(user_rating)])
print(yelp_data_radius[user_restaurant_distance <= r, .N])
print(yelp_data_radius[user_restaurant_distance > r, mean(user_rating)])
print("----")
}
r <- 1000
print(yelp_data_radius[user_restaurant_distance <= r, mean(user_rating)])
print(yelp_data_radius[user_restaurant_distance <= r, .N])
print(yelp_data_radius[user_restaurant_distance > r, mean(user_rating)])
yelp_data_radius
print(yelp_data_radius[user_restaurant_distance <= 1000, mean(user_rating)])
print(yelp_data_radius[user_restaurant_distance <= r, .N])
print(yelp_data_radius[user_restaurant_distance > 1000, mean(user_rating)])
print(yelp_data_radius[user_restaurant_distance <= 2000, mean(user_rating)])
print(yelp_data_radius[user_restaurant_distance <= r, .N])
print(yelp_data_radius[user_restaurant_distance > 2000, mean(user_rating)])
yelp_data_radius[user_restaurant_distance <= 2000]
yelp_data_radius[user_restaurant_distance > 2000]
yelp_data_radius[user_restaurant_distance > 3000]
r <- 1000
print(yelp_data_radius[user_restaurant_distance <= 3000, mean(user_rating)])
print(yelp_data_radius[user_restaurant_distance <= r, .N])
print(yelp_data_radius[user_restaurant_distance > 3000, mean(user_rating)])
r <- 1000
print(yelp_data_radius[user_restaurant_distance <= r, mean(user_rating)])
print(yelp_data_radius[user_restaurant_distance <= r, .N])
print(yelp_data_radius[user_restaurant_distance > r, mean(user_rating)])
q()
