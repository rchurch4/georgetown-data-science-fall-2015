for (i in 1:iterations_per_mu2) {
print(kmeans_custom(my_samples[[i]], k=2, max_iter = 10))
}
}
# Using custom kmeans with K=2 and print centers of each group.
# We also run kmeans muliple times for each value of mu2.
set.seed(1)
iterations_per_mu2 <- 3
for (i in 1:length(my_samples)) {
print("-----------------------------------------------")
print(paste0("Centers for ", names(my_samples)[i], ":", sep=""))
for (j in 1:iterations_per_mu2) {
print(kmeans_custom(my_samples[[i]], k=2, max_iter = 10))
}
}
kmeans_custom(my_samples[[4]], k=2, max_iter = 10)
kmeans_custom(my_samples[[4]], k=2, max_iter = 10)
kmeans_custom(my_samples[[4]], k=2, max_iter = 10)
kmeans_custom(my_samples[[4]], k=2, max_iter = 10)
# Using custom kmeans with K=2 and print centers of each group.
# We also run kmeans muliple times for each value of mu2.
set.seed(1)
iterations_per_mu2 <- 5
for (i in 1:length(my_samples)) {
print("-----------------------------------------------")
print(paste0("Centers for ", names(my_samples)[i], ":", sep=""))
for (j in 1:iterations_per_mu2) {
print(kmeans_custom(my_samples[[i]], k=2, max_iter = 10))
}
}
# Using custom kmeans with K=2 and print centers of each group.
# We also run kmeans muliple times for each value of mu2.
set.seed(1)
iterations_per_mu2 <- 5
for (i in 1:length(my_samples)) {
print("-----------------------------------------------")
print(paste0("Centers for ", names(my_samples)[i], ", multiple iterations" ":", sep=""))
for (j in 1:iterations_per_mu2) {
print(kmeans_custom(my_samples[[i]], k=2, max_iter = 10))
}
}
# Using custom kmeans with K=2 and print centers of each group.
# We also run kmeans muliple times for each value of mu2.
set.seed(1)
iterations_per_mu2 <- 5
for (i in 1:length(my_samples)) {
print("-----------------------------------------------")
print(paste0("Centers for ", names(my_samples)[i], ", multiple iterations", ":", sep=""))
for (j in 1:iterations_per_mu2) {
print(kmeans_custom(my_samples[[i]], k=2, max_iter = 10))
}
}
stats::kmeans
kmeans
stats:kmeans
stats:::kmeans
#' @title kmeans_custom()
#'
#' @note Version 1.3
#'
#' @author Ravi
#'
#' @description
#' Implements the kmeans algorithm. Stops when assignments don't change
#' or when the specified maximum iterations is reached.
#'
#' @param x data to be clustered as a numeric vector
#' @param k number of clusters desired
#' @param max_iter maximum number of iterations for kmeans
#'
#' @return means for each cluster as a numeric vector
#'
#' @example
#' d <- my_samples[[4]]
#' set.seed(1); kmeans_custom(d, 2, 10)
kmeans_custom <- function(x, k, max_iter) {
# Randomly make assignments
a <- sample(1:k, size=length(x), replace=TRUE)
# Initialize variables
means_vec <- numeric(k)
a_old <- numeric(length(x))
count <- 1
# Main KNN Loop
while (a_old != a && count <= max_iter) {
# Save current assignments for comparison
a_old <- a
# Calculate mean for each cluster
for (i in 1:k) {
means_vec[i] <- mean(x[a==i])
}
# Calculate distance from each observation to each mean
for (j in 1:length(x)) {
current_obs_distances <- numeric(k) # to hold distance to each cluster mean
for (i in 1:k) {
current_obs_distances[i] <- abs(x[j] - means_vec[i])
}
# Update cluster assignment, using smallest obs-cluster distance
a[j] <- which.min(current_obs_distances)
}
count <- count + 1
print(a == a_old)
}
return(means_vec)
}
kmeans_custom(d, 2, 10)
kmeans_custom(d, 2, 10)
kmeans_custom(d, 2, 10)
kmeans_custom(d, 2, 10)
kmeans_custom(d, 2, 10)
kmeans_custom(d, 2, 10)
#' @title kmeans_custom()
#'
#' @note Version 1.3
#'
#' @author Ravi
#'
#' @description
#' Implements the kmeans algorithm. Stops when assignments don't change
#' or when the specified maximum iterations is reached.
#'
#' @param x data to be clustered as a numeric vector
#' @param k number of clusters desired
#' @param max_iter maximum number of iterations for kmeans
#'
#' @return means for each cluster as a numeric vector
#'
#' @example
#' d <- my_samples[[4]]
#' set.seed(1); kmeans_custom(d, 2, 10)
kmeans_custom <- function(x, k, max_iter) {
# Randomly make assignments
a <- sample(1:k, size=length(x), replace=TRUE)
# Initialize variables
means_vec <- numeric(k)
a_old <- numeric(length(x))
count <- 1
# Main KNN Loop
while (a_old != a && count <= max_iter) {
# Save current assignments for comparison
a_old <- a
# Calculate mean for each cluster
for (i in 1:k) {
means_vec[i] <- mean(x[a==i])
}
# Calculate distance from each observation to each mean
for (j in 1:length(x)) {
current_obs_distances <- numeric(k) # to hold distance to each cluster mean
for (i in 1:k) {
current_obs_distances[i] <- abs(x[j] - means_vec[i])
}
# Update cluster assignment, using smallest obs-cluster distance
a[j] <- which.min(current_obs_distances)
}
count <- count + 1
print(all(a == a_old))
}
return(means_vec)
}
kmeans_custom(d, 2, 10)
kmeans_custom(d, 2, 10)
kmeans_custom(d, 2, 10)
kmeans_custom(d, 2, 10)
kmeans_custom(d, 2, 10)
kmeans_custom(d, 2, 10)
kmeans_custom(d, 2, 10)
#' @title kmeans_custom()
#'
#' @note Version 1.3
#'
#' @author Ravi
#'
#' @description
#' Implements the kmeans algorithm. Stops when assignments don't change
#' or when the specified maximum iterations is reached.
#'
#' @param x data to be clustered as a numeric vector
#' @param k number of clusters desired
#' @param max_iter maximum number of iterations for kmeans
#'
#' @return means for each cluster as a numeric vector
#'
#' @example
#' d <- my_samples[[4]]
#' set.seed(1); kmeans_custom(d, 2, 10)
kmeans_custom <- function(x, k, max_iter) {
# Randomly make assignments
a <- sample(1:k, size=length(x), replace=TRUE)
# Initialize variables
means_vec <- numeric(k)
a_old <- numeric(length(x))
count <- 1
# Main KNN Loop
while (!all(a == a_old) && count <= max_iter) {
# Save current assignments for comparison
a_old <- a
# Calculate mean for each cluster
for (i in 1:k) {
means_vec[i] <- mean(x[a==i])
}
# Calculate distance from each observation to each mean
for (j in 1:length(x)) {
current_obs_distances <- numeric(k) # to hold distance to each cluster mean
for (i in 1:k) {
current_obs_distances[i] <- abs(x[j] - means_vec[i])
}
# Update cluster assignment, using smallest obs-cluster distance
a[j] <- which.min(current_obs_distances)
}
count <- count + 1
print(all(a == a_old))
}
return(means_vec)
}
kmeans_custom(d, 2, 10)
kmeans_custom(d, 2, 10)
kmeans_custom(d, 2, 10)
kmeans_custom(d, 2, 10)
kmeans_custom(d, 2, 10)
kmeans_custom(d, 2, 10)
kmeans_custom(d, 2, 10)
kmeans_custom(d, 2, 10)
kmeans_custom(d, 2, 10)
kmeans_custom(d, 2, 10)
# Using custom kmeans with K=2 and print centers of each group.
# We also run kmeans muliple times for each value of mu2.
set.seed(1)
iterations_per_mu2 <- 3
for (i in 1:length(my_samples)) {
print("-----------------------------------------------")
print(paste0("Centers for ", names(my_samples)[i], ", multiple iterations", ":", sep=""))
for (j in 1:iterations_per_mu2) {
print(kmeans_custom(my_samples[[i]], k=2, max_iter = 10))
}
}
q()
?dnorm
source('~/.active-rstudio-document', echo=TRUE)
my_samples[[2]]
?norm
?var
source('C:/Users/Ravi/Docs/Geekazoid/Courses/Stochastic_Simulation/Code/emm_custom.R')
source('C:/Users/Ravi/Docs/Geekazoid/Courses/Stochastic_Simulation/Code/emm_custom.R')
?norm
norm(c(1,1), "F")
norm(matrix(c(1,1)), "F")
source('C:/Users/Ravi/Docs/Geekazoid/Courses/Stochastic_Simulation/Code/emm_custom.R')
source('C:/Users/Ravi/Docs/Geekazoid/Courses/Stochastic_Simulation/Code/emm_custom.R')
source('C:/Users/Ravi/Docs/Geekazoid/Courses/Stochastic_Simulation/Code/emm_custom.R')
source('C:/Users/Ravi/Docs/Geekazoid/Courses/Stochastic_Simulation/Code/emm_custom.R')
c(stating_values[1], stating_values[2], var(my_samples[[2]]), my_samples[[2]], 0.5)
source('C:/Users/Ravi/Docs/Geekazoid/Courses/Stochastic_Simulation/Code/emm_custom.R')
source('C:/Users/Ravi/Docs/Geekazoid/Courses/Stochastic_Simulation/Code/emm_custom.R')
# ESL Example
d <- c(-.39, .12, .94, 1.67, 1.76,
2.44, 3.72, 4.28, 4.92, 5.53,
0.06, .48, 1.01, 1.68, 1.80,
3.25, 4.12, 4.6, 5.28, 6.22)
d
theta_start <- c(d[sample(1:length(d), size=2)], var(d), var(d), 0.5)
theta_start
# ESL Example
d <- c(-.39, .12, .94, 1.67, 1.76,
2.44, 3.72, 4.28, 4.92, 5.53,
0.06, .48, 1.01, 1.68, 1.80,
3.25, 4.12, 4.6, 5.28, 6.22)
theta_start <- c(d[sample(1:length(d), size=2)], var(d), var(d), 0.5)
em_custom(x=d,
theta_not=theta_start,
max_iter=10)
# ESL Example
d <- c(-.39, .12, .94, 1.67, 1.76,
2.44, 3.72, 4.28, 4.92, 5.53,
0.06, .48, 1.01, 1.68, 1.80,
3.25, 4.12, 4.6, 5.28, 6.22)
theta_start <- c(d[sample(1:length(d), size=2)], var(d), var(d), 0.5)
em_custom(x=d,
theta_not=theta_start,
max_iter=100)
# ESL Example
d <- c(-.39, .12, .94, 1.67, 1.76,
2.44, 3.72, 4.28, 4.92, 5.53,
0.06, .48, 1.01, 1.68, 1.80,
3.25, 4.12, 4.6, 5.28, 6.22)
theta_start <- c(d[sample(1:length(d), size=2)], var(d), var(d), 0.5)
em_custom(x=d,
theta_not=theta_start,
max_iter=100)
# ESL Example
d <- c(-.39, .12, .94, 1.67, 1.76,
2.44, 3.72, 4.28, 4.92, 5.53,
0.06, .48, 1.01, 1.68, 1.80,
3.25, 4.12, 4.6, 5.28, 6.22)
theta_start <- c(d[sample(1:length(d), size=2)], var(d), var(d), 0.5)
em_custom(x=d,
theta_not=theta_start,
max_iter=100)
# ESL Example
d <- c(-.39, .12, .94, 1.67, 1.76,
2.44, 3.72, 4.28, 4.92, 5.53,
0.06, .48, 1.01, 1.68, 1.80,
3.25, 4.12, 4.6, 5.28, 6.22)
theta_start <- c(d[sample(1:length(d), size=2)], var(d), var(d), 0.5)
em_custom(x=d,
theta_not=theta_start,
max_iter=100)
source('C:/Users/Ravi/Docs/Geekazoid/Courses/Stochastic_Simulation/Code/emm_custom.R')
source('C:/Users/Ravi/Docs/Geekazoid/Courses/Stochastic_Simulation/Code/emm_custom.R')
source('C:/Users/Ravi/Docs/Geekazoid/Courses/Stochastic_Simulation/Code/emm_custom.R')
source('C:/Users/Ravi/Docs/Geekazoid/Courses/Stochastic_Simulation/Code/emm_custom.R')
source('C:/Users/Ravi/Docs/Geekazoid/Courses/Stochastic_Simulation/Code/emm_custom.R')
source('C:/Users/Ravi/Docs/Geekazoid/Courses/Stochastic_Simulation/Code/emm_custom.R')
source('C:/Users/Ravi/Docs/Geekazoid/Courses/Stochastic_Simulation/Code/emm_custom.R')
source('C:/Users/Ravi/Docs/Geekazoid/Courses/Stochastic_Simulation/Code/emm_custom_1-1.R')
results <- em_custom(x=d,
theta_not=theta_start,
max_iter=100)
results
results
results <- em_custom(x=d,
theta_not=theta_start,
max_iter=100)
print(results)
results <- em_custom(x=d,
theta_not=theta_start,
max_iter=100)
print(results)
results <- em_custom(x=d,
theta_not=theta_start,
max_iter=100)
print(results)
results <- em_custom(x=d,
theta_not=theta_start,
max_iter=100)
print(results)
results <- em_custom(x=d,
theta_not=theta_start,
max_iter=100)
print(results)
results <- em_custom(x=d,
theta_not=theta_start,
max_iter=100)
print(results)
results <- em_custom(x=d,
theta_not=theta_start,
max_iter=100)
print(results)
results <- em_custom(x=d,
theta_not=theta_start,
max_iter=100)
print(results)
source('C:/Users/Ravi/Docs/Geekazoid/Courses/Stochastic_Simulation/Code/emm_custom_1-1.R')
source('C:/Users/Ravi/Docs/Geekazoid/Courses/Stochastic_Simulation/Code/emm_custom_1-1.R')
source('C:/Users/Ravi/Docs/Geekazoid/Courses/Stochastic_Simulation/Code/emm_custom_1-1.R')
source('C:/Users/Ravi/Docs/Geekazoid/Courses/Stochastic_Simulation/Code/emm_custom_1-1.R')
source('C:/Users/Ravi/Docs/Geekazoid/Courses/Stochastic_Simulation/Code/emm_custom_1-1.R')
source('C:/Users/Ravi/Docs/Geekazoid/Courses/Stochastic_Simulation/Code/emm_custom_1-1.R')
source('C:/Users/Ravi/Docs/Geekazoid/Courses/Stochastic_Simulation/Code/emm_custom_1-1.R')
source('C:/Users/Ravi/Docs/Geekazoid/Courses/Stochastic_Simulation/Code/emm_custom_1-1.R')
source('C:/Users/Ravi/Docs/Geekazoid/Courses/Stochastic_Simulation/Code/emm_custom_1-1.R')
source('C:/Users/Ravi/Docs/Geekazoid/Courses/Stochastic_Simulation/Code/emm_custom_1-1.R')
source('C:/Users/Ravi/Docs/Geekazoid/Courses/Stochastic_Simulation/Code/emm_custom_1-1.R')
source('C:/Users/Ravi/Docs/Geekazoid/Courses/Stochastic_Simulation/Code/emm_custom_1-1.R')
source('C:/Users/Ravi/Docs/Geekazoid/Courses/Stochastic_Simulation/Code/emm_custom_1-1.R')
source('C:/Users/Ravi/Docs/Geekazoid/Courses/Stochastic_Simulation/Code/emm_custom_1-1.R')
source('C:/Users/Ravi/Docs/Geekazoid/Courses/Stochastic_Simulation/Code/emm_custom_1-1.R')
source('C:/Users/Ravi/Docs/Geekazoid/Courses/Stochastic_Simulation/Code/emm_custom_1-1.R')
source('C:/Users/Ravi/Docs/Geekazoid/Courses/Stochastic_Simulation/Code/emm_custom_1-1.R')
source('C:/Users/Ravi/Docs/Geekazoid/Courses/Stochastic_Simulation/Code/emm_custom_1-1.R')
source('C:/Users/Ravi/Docs/Geekazoid/Courses/Stochastic_Simulation/Code/emm_custom_1-1.R')
source('C:/Users/Ravi/Docs/Geekazoid/Courses/Stochastic_Simulation/Code/emm_custom_1-1.R')
source('C:/Users/Ravi/Docs/Geekazoid/Courses/Stochastic_Simulation/Code/emm_custom_1-1.R')
source('C:/Users/Ravi/Docs/Geekazoid/Courses/Stochastic_Simulation/Code/emm_custom_1-1.R')
source('C:/Users/Ravi/Docs/Geekazoid/Courses/Stochastic_Simulation/Code/emm_custom_1-1.R')
source('C:/Users/Ravi/Docs/Geekazoid/Courses/Stochastic_Simulation/Code/emm_custom_1-1.R')
source('C:/Users/Ravi/Docs/Geekazoid/Courses/Stochastic_Simulation/Code/emm_custom_1-1.R')
source('C:/Users/Ravi/Docs/Geekazoid/Courses/Stochastic_Simulation/Code/emm_custom_1-1.R')
source('C:/Users/Ravi/Docs/Geekazoid/Courses/Stochastic_Simulation/Code/emm_custom_1-1.R')
source('C:/Users/Ravi/Docs/Geekazoid/Courses/Stochastic_Simulation/Code/emm_custom_1-1.R')
source('C:/Users/Ravi/Docs/Geekazoid/Courses/Stochastic_Simulation/Code/emm_custom_1-1.R')
source('C:/Users/Ravi/Docs/Geekazoid/Courses/Stochastic_Simulation/Code/emm_custom_1-1.R')
source('C:/Users/Ravi/Docs/Geekazoid/Courses/Stochastic_Simulation/Code/emm_custom_1-1.R')
source('C:/Users/Ravi/Docs/Geekazoid/Courses/Stochastic_Simulation/Code/emm_custom_1-1.R')
source('C:/Users/Ravi/Docs/Geekazoid/Courses/Stochastic_Simulation/Code/emm_custom_1-1.R')
source('C:/Users/Ravi/Docs/Geekazoid/Courses/Stochastic_Simulation/Code/emm_custom_1-1.R')
q()
d <- data.frame(A=1:10, B="hi")
d
d[[1,1]]
d[[1,1]] <- matrix(c(1,2,3,4), nrow=2)
d <- data.table(d)
require(data.table)
d <- data.table(d)
d[[1,1]] <- matrix(c(1,2,3,4), nrow=2)
d
tables()
matrix(c(1,2,3,4), nrow=2)
d$C <- matrix(c(1,2,3,4), nrow=2)
d
d$C <- list(matrix(c(1,2,3,4), nrow=2))
d[[1,1]] <- list(matrix(c(1,2,3,4), nrow=2))
d
?vector
data.frame(i=1:5, m=I(vector(mode="list", length=5)))
d[1,1] <- matrix(c(1,2,3,4), nrow=2)
d
d <- data.frame(i=1:5, m=I(vector(mode="list", length=5)))
d
d[1,1] <- matrix(c(1,2,3,4), nrow=2)
d
dat[[2, "m"]] <- matrix(rnorm(9), 3, 3)
dat <- data.frame(i=1:5, m=I(vector(mode="list", length=5)))
dat[[2, "m"]] <- matrix(rnorm(9), 3, 3)
data
dat
View(dat)
dat[[2,2]]
dat[[2,"m"]]
dat <- data.frame(i=1:5, m=I(vector(mode="list", length=5)))
dat[[2, 2]] <- matrix(rnorm(9), 3, 3)
dat[[2, 2]]
?list
test <- list(5)
test
length(test)
test <- list(length=5)
test
print(d)
print(d[2,2])
d <- data.frame(i=1:5, m=I(vector(mode="list", length=5)))
d[[2, 2]] <- matrix(rnorm(9), 3, 3)
print(d[2,2])
d <- data.frame(i=1:5, m=I(vector(mode="list", length=5)))
d[2,2] <- matrix(rnorm(9), 3, 3)
d[[2,2]] <- matrix(rnorm(9), 3, 3)
print(d)
print(d[2,2])
d <- data.frame(i=1:5, m=vector(mode="list", length=5))
d <- data.frame(i=1:5, m=I(vector(mode="list", length=5)))
d <- data.frame(i=1:5, m=I(list(numeric(5)))
d[[2, 2]] <- matrix(rnorm(9), 3, 3)
print(d)
print(d[2,2])
list(numeric(5))
I(vector(mode="list", length=5))
I(vector(mode="list", length=5))
q()
source('~/.active-rstudio-document', echo=TRUE)
my_X_samples <- replicate(n=num_samples, sample_X(Q, D))
my_X_samples
# Generate samples of X and find density
set.seed(1)
num_samples <- 10000
my_X_samples <- replicate(n=num_samples, sample_X(Q, D)) # returns as a matrix
my_X_samples_densities <- numeric(num_samples)
for (i in 1:num_samples) {
my_X_samples_densities[i] <- bivariate_normal_pdf_value(my_X_samples[ ,i], Sigma)
}
# See how many samples are in E
samples_in_E <- my_X_samples_densities <
rep(bivariate_normal_pdf_value(x_hat, Sigma), num_samples)
# Calculate p-value
sum(samples_in_E)/num_samples
my_samples
summary(my_samples)
head(my_samples[[1]])
summary(my_samples)
head(my_samples[[1]])
head(my_samples[[2]])
head(my_samples[[3]])
head(my_samples[[4]])
set.seed(1)
iterations_per_mu2 <- 1 # we only use 1, since results seem to be the same each time
for (i in 1:length(my_samples)) {
# theta_start is chosen by:
#     1) randomly sampling two values from the sample data for the means
#     2) using the overall sample variance
#     3) setting p=.5
theta_start <- c(my_samples[[i]][sample(1:length(my_samples[[i]]),
replace=FALSE,
size=2)],
var(my_samples[[i]]),
var(my_samples[[i]]),
0.5)
# Run algorithm for all four samples and print results
print("-----------------------------------------------")
print(paste0("theta for ", names(my_samples)[i], ":", sep=""))
for (j in 1:iterations_per_mu2) {
print(em_custom(my_samples[[i]],
theta_not=theta_start,
max_iter = 100,
stop_threshold=.001))
}
}
rm(list=ls())
q()
q()
q()
setwd("C:/Users/Ravi/Docs/Geekazoid/Courses/Intro_to_Analytics/Project/Git/georgetown-data-science-fall-2015/data")
d <- read.csv(file="geocode_lookup_table.csv")
head(d)
unique(d)
nrow(d)
nrow(unique(d))
duplicated(d)
duplicates(d)
d[duplicated(d), ]
d_new <- unique(d)
write.csv(d_new, file = "geocode_lookup_table_unique.csv")
?write.csv
write.csv(d_new, file = "geocode_lookup_table_unique.csv", row.names = FALSE)
rm(list=ls())
q()
